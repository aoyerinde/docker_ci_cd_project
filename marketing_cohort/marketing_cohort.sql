CREATE OR REPLACE TABLE KG_DWH.L2_MARKETING_COHORT_MODEL.MARKETING_COHORT AS

WITH INSTALL_COST_COUNT AS (
    -- Select to handle the full outer join
    SELECT COALESCE(MC.DATE, IC.INSTALL_DATE)                        INSTALL_DATE,
           COALESCE(MC.MEDIA_SOURCE, IC.MEDIA_SOURCE)                MEDIA_SOURCE,
           COALESCE(MC.COUNTRY_CODE, IC.COUNTRY_CODE)                COUNTRY_CODE,
           COALESCE(MC.CAMPAIGN_ID, IC.CAMPAIGN_ID)                  CAMPAIGN_ID,
           COALESCE(MC.SUB_CAMPAIGN_ID, IC.SUB_CAMPAIGN_ID)          SUB_CAMPAIGN_ID,
           COALESCE(MC.COST, IC.TOTAL_USD_REPORTED_COST_PER_INSTALL) COST,
           IC.INSTALL_COUNT
           -- Full outer join of cost and installs
    FROM L2_MARKETING_COHORT_MODEL.MARKETING_COST MC
             FULL OUTER JOIN L2_MARKETING_COHORT_MODEL.INSTALL_COUNT IC
                             ON (MC.DATE = IC.INSTALL_DATE AND
                                 MC.MEDIA_SOURCE = IC.MEDIA_SOURCE AND
                                 MC.COUNTRY_CODE = IC.COUNTRY_CODE AND
                                 MC.CAMPAIGN_ID = IC.CAMPAIGN_ID AND
                                 MC.SUB_CAMPAIGN_ID = IC.SUB_CAMPAIGN_ID)
),
     INFO_BACKUP AS (SELECT MEDIA_SOURCE,
                            CAMPAIGN_ID,
                            MODE(PLATFORM)      PLATFORM,
                            MODE(GAME_NAME)     GAME_NAME,
                            MODE(CAMPAIGN_NAME) CAMPAIGN_NAME,
                            MODE(SOURCE)        SOURCE
                     FROM L2_MARKETING_COHORT_MODEL.CAMPAIGN_INFORMATION
                     GROUP BY MEDIA_SOURCE, CAMPAIGN_ID
     ),
     CAMPAIGN_INFO_COST_COUNT AS
         (SELECT INSTALL_COST_COUNT.INSTALL_DATE,
                 INSTALL_COST_COUNT.MEDIA_SOURCE,
                 INSTALL_COST_COUNT.COUNTRY_CODE,
                 INSTALL_COST_COUNT.CAMPAIGN_ID,
                 INSTALL_COST_COUNT.SUB_CAMPAIGN_ID,
                 COALESCE(INFO.PLATFORM, INFO_BACKUP.PLATFORM)                                           PLATFORM,
                 COALESCE(INFO.CAMPAIGN_NAME, INFO_BACKUP.CAMPAIGN_NAME, INSTALL_COST_COUNT.CAMPAIGN_ID) CAMPAIGN_NAME,
                 COALESCE(INFO.SUB_CAMPAIGN_NAME, INSTALL_COST_COUNT.SUB_CAMPAIGN_ID)                    SUB_CAMPAIGN_NAME,
                 COALESCE(INFO.GAME_NAME, INFO_BACKUP.GAME_NAME)                                         GAME_NAME,
                 COALESCE(INFO.SOURCE, 'Non-Organic')                                                    SOURCE,
                 INSTALL_COST_COUNT.COST,
                 ZEROIFNULL(INSTALL_COST_COUNT.INSTALL_COUNT)                                            INSTALL_COUNT,
                 COALESCE(PRED_COUNTRY_TIER_TBL.COUNTRY_TIER, 'ROW')                                     PRED_COUNTRY_TIER,
                 COALESCE(PERFORMANCE_TARGET_TBL.COUNTRY_TIER, 'ROW')                                    PERFORMANCE_TARGET_COUNTRY_TIER
          FROM INSTALL_COST_COUNT

                   -- Joining app name, platform, campaign name, sub campaign (unique per IMCCS)
                   LEFT OUTER JOIN L2_MARKETING_COHORT_MODEL.CAMPAIGN_INFORMATION INFO
                                   ON (INSTALL_COST_COUNT.MEDIA_SOURCE = INFO.MEDIA_SOURCE AND
                                       INSTALL_COST_COUNT.CAMPAIGN_ID = INFO.CAMPAIGN_ID AND
                                       INSTALL_COST_COUNT.SUB_CAMPAIGN_ID = INFO.SUB_CAMPAIGN_ID)

              -- Missing install backup if no sub campaign match found in campaign information
                   LEFT OUTER JOIN INFO_BACKUP
                                   ON (INSTALL_COST_COUNT.MEDIA_SOURCE = INFO_BACKUP.MEDIA_SOURCE AND
                                       INSTALL_COST_COUNT.CAMPAIGN_ID = INFO_BACKUP.CAMPAIGN_ID)

              --DYNAMIC COUNTRY TIER NEEDED FOR PERFORMANCE TARGET JOIN
                   LEFT OUTER JOIN (SELECT DISTINCT COUNTRY_TIER
                                    FROM L1_MARKETING.STATIC_PERFORMANCE_TARGET) PERFORMANCE_TARGET_TBL
                                   ON PERFORMANCE_TARGET_TBL.COUNTRY_TIER = INSTALL_COST_COUNT.COUNTRY_CODE

              --Dynamic country tier needed for D90 predicted revenue
                   LEFT OUTER JOIN (SELECT DISTINCT COUNTRY_TIER
                                    FROM L1_MARKETING.STATIC_LTV_PREDICTION_MULTIPLIERS) PRED_COUNTRY_TIER_TBL
                                   ON PRED_COUNTRY_TIER_TBL.COUNTRY_TIER = INSTALL_COST_COUNT.COUNTRY_CODE
         )


SELECT CAMPAIGN_INFO_COST_COUNT.INSTALL_DATE::DATE                             INSTALL_DATE,
       CAMPAIGN_INFO_COST_COUNT.MEDIA_SOURCE::VARCHAR                          MEDIA_SOURCE,
       CAMPAIGN_INFO_COST_COUNT.COUNTRY_CODE::VARCHAR                          COUNTRY_CODE,
       CAMPAIGN_INFO_COST_COUNT.CAMPAIGN_ID::VARCHAR                           CAMPAIGN_ID,
       CAMPAIGN_INFO_COST_COUNT.SUB_CAMPAIGN_ID::VARCHAR                       SUB_CAMPAIGN_ID,
       CAMPAIGN_INFO_COST_COUNT.PLATFORM::VARCHAR                              PLATFORM,
       CAMPAIGN_INFO_COST_COUNT.CAMPAIGN_NAME::VARCHAR                         CAMPAIGN_NAME,
       CAMPAIGN_INFO_COST_COUNT.SUB_CAMPAIGN_NAME::VARCHAR                     SUB_CAMPAIGN_NAME,
       CAMPAIGN_INFO_COST_COUNT.GAME_NAME::VARCHAR                             GAME_NAME,
       CAMPAIGN_INFO_COST_COUNT.SOURCE::VARCHAR                                SOURCE,
       CAMPAIGN_INFO_COST_COUNT.COST::FLOAT                                    COST,
       CAMPAIGN_INFO_COST_COUNT.INSTALL_COUNT::NUMBER                          INSTALL_COUNT,
       PRED_COUNTRY_TIER::VARCHAR                                              PRED_COUNTRY_TIER,
       PERFORMANCE_TARGET_COUNTRY_TIER::VARCHAR                                PERFORMANCE_TARGET_COUNTRY_TIER,
       COALESCE(STATIC_COUNTRY_TIER_TBL.COUNTRY_TIER, 'ROW')::VARCHAR          COUNTRY_TIER,

       --PURCHASE MEASURES
       ZEROIFNULL(PURCHASES.PURCHASE_COUNT)::NUMBER                            PURCHASE_COUNT,
       ZEROIFNULL(PURCHASES.D01_PURCHASE_COUNT)::NUMBER                        D01_PURCHASE_COUNT,
       ZEROIFNULL(PURCHASES.D03_PURCHASE_COUNT)::NUMBER                        D03_PURCHASE_COUNT,
       ZEROIFNULL(PURCHASES.D07_PURCHASE_COUNT)::NUMBER                        D07_PURCHASE_COUNT,
       ZEROIFNULL(PURCHASES.D14_PURCHASE_COUNT)::NUMBER                        D14_PURCHASE_COUNT,
       ZEROIFNULL(PURCHASES.D30_PURCHASE_COUNT)::NUMBER                        D30_PURCHASE_COUNT,
       ZEROIFNULL(PURCHASES.D60_PURCHASE_COUNT)::NUMBER                        D60_PURCHASE_COUNT,
       ZEROIFNULL(PURCHASES.D90_PURCHASE_COUNT)::NUMBER                        D90_PURCHASE_COUNT,
       ZEROIFNULL(PURCHASES.D180_PURCHASE_COUNT)::NUMBER                       D180_PURCHASE_COUNT,
       ZEROIFNULL(PURCHASES.D360_PURCHASE_COUNT)::NUMBER                       D360_PURCHASE_COUNT,
       ZEROIFNULL(PURCHASES.PURCHASE_REVENUE_GROSS)::FLOAT                     PURCHASE_REVENUE_GROSS,
       ZEROIFNULL(PURCHASES.D01_PURCHASE_REVENUE_GROSS)::FLOAT                 D01_PURCHASE_REVENUE_GROSS,
       ZEROIFNULL(PURCHASES.D03_PURCHASE_REVENUE_GROSS)::FLOAT                 D03_PURCHASE_REVENUE_GROSS,
       ZEROIFNULL(PURCHASES.D07_PURCHASE_REVENUE_GROSS)::FLOAT                 D07_PURCHASE_REVENUE_GROSS,
       ZEROIFNULL(PURCHASES.D14_PURCHASE_REVENUE_GROSS)::FLOAT                 D14_PURCHASE_REVENUE_GROSS,
       ZEROIFNULL(PURCHASES.D30_PURCHASE_REVENUE_GROSS)::FLOAT                 D30_PURCHASE_REVENUE_GROSS,
       ZEROIFNULL(PURCHASES.D60_PURCHASE_REVENUE_GROSS)::FLOAT                 D60_PURCHASE_REVENUE_GROSS,
       ZEROIFNULL(PURCHASES.D90_PURCHASE_REVENUE_GROSS)::FLOAT                 D90_PURCHASE_REVENUE_GROSS,
       ZEROIFNULL(PURCHASES.D180_PURCHASE_REVENUE_GROSS)::FLOAT                D180_PURCHASE_REVENUE_GROSS,
       ZEROIFNULL(PURCHASES.D360_PURCHASE_REVENUE_GROSS)::FLOAT                D360_PURCHASE_REVENUE_GROSS,
       ZEROIFNULL(PURCHASES.PURCHASE_REVENUE_AFTER_SHARE)::FLOAT               PURCHASE_REVENUE_AFTER_SHARE,
       ZEROIFNULL(PURCHASES.D01_PURCHASE_REVENUE_AFTER_SHARE)::FLOAT           D01_PURCHASE_REVENUE_AFTER_SHARE,
       ZEROIFNULL(PURCHASES.D03_PURCHASE_REVENUE_AFTER_SHARE)::FLOAT           D03_PURCHASE_REVENUE_AFTER_SHARE,
       ZEROIFNULL(PURCHASES.D07_PURCHASE_REVENUE_AFTER_SHARE)::FLOAT           D07_PURCHASE_REVENUE_AFTER_SHARE,
       ZEROIFNULL(PURCHASES.D14_PURCHASE_REVENUE_AFTER_SHARE)::FLOAT           D14_PURCHASE_REVENUE_AFTER_SHARE,
       ZEROIFNULL(PURCHASES.D30_PURCHASE_REVENUE_AFTER_SHARE)::FLOAT           D30_PURCHASE_REVENUE_AFTER_SHARE,
       ZEROIFNULL(PURCHASES.D60_PURCHASE_REVENUE_AFTER_SHARE)::FLOAT           D60_PURCHASE_REVENUE_AFTER_SHARE,
       ZEROIFNULL(PURCHASES.D90_PURCHASE_REVENUE_AFTER_SHARE)::FLOAT           D90_PURCHASE_REVENUE_AFTER_SHARE,
       ZEROIFNULL(PURCHASES.D180_PURCHASE_REVENUE_AFTER_SHARE)::FLOAT          D180_PURCHASE_REVENUE_AFTER_SHARE,
       ZEROIFNULL(PURCHASES.D360_PURCHASE_REVENUE_AFTER_SHARE)::FLOAT          D360_PURCHASE_REVENUE_AFTER_SHARE,
       ZEROIFNULL(PURCHASES.PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT     PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT,
       ZEROIFNULL(PURCHASES.D01_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D01_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT,
       ZEROIFNULL(PURCHASES.D03_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D03_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT,
       ZEROIFNULL(PURCHASES.D07_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D07_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT,
       ZEROIFNULL(PURCHASES.D14_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D14_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT,
       ZEROIFNULL(PURCHASES.D30_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D30_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT,
       ZEROIFNULL(PURCHASES.D60_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D60_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT,
       ZEROIFNULL(PURCHASES.D90_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D90_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT,
       ZEROIFNULL(PURCHASES.D180_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D180_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT,
       ZEROIFNULL(PURCHASES.D360_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D360_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT,

       --AD MEASURES
       ZEROIFNULL(AD_COUNT_REVENUE.AD_WATCHED_COUNT)::NUMBER                   AD_WATCHED_COUNT,
       ZEROIFNULL(AD_COUNT_REVENUE.D01_AD_WATCHED_COUNT)::NUMBER               D01_AD_WATCHED_COUNT,
       ZEROIFNULL(AD_COUNT_REVENUE.D03_AD_WATCHED_COUNT)::NUMBER               D03_AD_WATCHED_COUNT,
       ZEROIFNULL(AD_COUNT_REVENUE.D07_AD_WATCHED_COUNT)::NUMBER               D07_AD_WATCHED_COUNT,
       ZEROIFNULL(AD_COUNT_REVENUE.D14_AD_WATCHED_COUNT)::NUMBER               D14_AD_WATCHED_COUNT,
       ZEROIFNULL(AD_COUNT_REVENUE.D30_AD_WATCHED_COUNT)::NUMBER               D30_AD_WATCHED_COUNT,
       ZEROIFNULL(AD_COUNT_REVENUE.D60_AD_WATCHED_COUNT)::NUMBER               D60_AD_WATCHED_COUNT,
       ZEROIFNULL(AD_COUNT_REVENUE.D90_AD_WATCHED_COUNT)::NUMBER               D90_AD_WATCHED_COUNT,
       ZEROIFNULL(AD_COUNT_REVENUE.D180_AD_WATCHED_COUNT)::NUMBER              D180_AD_WATCHED_COUNT,
       ZEROIFNULL(AD_COUNT_REVENUE.D360_AD_WATCHED_COUNT)::NUMBER              D360_AD_WATCHED_COUNT,
       ZEROIFNULL(AD_COUNT_REVENUE.AD_WATCHED_REVENUE)::FLOAT                  AD_WATCHED_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D01_AD_WATCHED_REVENUE)::FLOAT              D01_AD_WATCHED_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D03_AD_WATCHED_REVENUE)::FLOAT              D03_AD_WATCHED_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D07_AD_WATCHED_REVENUE)::FLOAT              D07_AD_WATCHED_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D14_AD_WATCHED_REVENUE)::FLOAT              D14_AD_WATCHED_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D30_AD_WATCHED_REVENUE)::FLOAT              D30_AD_WATCHED_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D60_AD_WATCHED_REVENUE)::FLOAT              D60_AD_WATCHED_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D90_AD_WATCHED_REVENUE)::FLOAT              D90_AD_WATCHED_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D180_AD_WATCHED_REVENUE)::FLOAT             D180_AD_WATCHED_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D360_AD_WATCHED_REVENUE)::FLOAT             D360_AD_WATCHED_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.AD_WATCHED_REVENUE) +
       ZEROIFNULL(PURCHASES.PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT     TOTAL_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D01_AD_WATCHED_REVENUE) +
       ZEROIFNULL(PURCHASES.D01_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D01_TOTAL_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D03_AD_WATCHED_REVENUE) +
       ZEROIFNULL(PURCHASES.D03_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D03_TOTAL_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D07_AD_WATCHED_REVENUE) +
       ZEROIFNULL(PURCHASES.D07_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D07_TOTAL_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D14_AD_WATCHED_REVENUE) +
       ZEROIFNULL(PURCHASES.D14_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D14_TOTAL_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D30_AD_WATCHED_REVENUE) +
       ZEROIFNULL(PURCHASES.D30_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D30_TOTAL_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D60_AD_WATCHED_REVENUE) +
       ZEROIFNULL(PURCHASES.D60_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D60_TOTAL_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D90_AD_WATCHED_REVENUE) +
       ZEROIFNULL(PURCHASES.D90_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D90_TOTAL_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D180_AD_WATCHED_REVENUE) +
       ZEROIFNULL(PURCHASES.D180_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D180_TOTAL_REVENUE,
       ZEROIFNULL(AD_COUNT_REVENUE.D360_AD_WATCHED_REVENUE) +
       ZEROIFNULL(PURCHASES.D360_PURCHASE_REVENUE_AFTER_SHARE_AFTER_VAT)::FLOAT D360_TOTAL_REVENUE,

       --D90 predicted revenue final measure
       ZEROIFNULL(CASE
                      WHEN DATEDIFF(DAY, CAMPAIGN_INFO_COST_COUNT.INSTALL_DATE, CURRENT_DATE()) < 3 then
                          (D01_TOTAL_REVENUE) * D90_D01
                      WHEN DATEDIFF(DAY, CAMPAIGN_INFO_COST_COUNT.INSTALL_DATE, CURRENT_DATE()) < 7 then
                          (D03_TOTAL_REVENUE) * D90_D03
                      WHEN DATEDIFF(DAY, CAMPAIGN_INFO_COST_COUNT.INSTALL_DATE, CURRENT_DATE()) < 14 then
                          (D07_TOTAL_REVENUE) * D90_D07
                      WHEN DATEDIFF(DAY, CAMPAIGN_INFO_COST_COUNT.INSTALL_DATE, CURRENT_DATE()) < 30 then
                          (D14_TOTAL_REVENUE) * D90_D14
                      WHEN DATEDIFF(DAY, CAMPAIGN_INFO_COST_COUNT.INSTALL_DATE, CURRENT_DATE()) < 60 then
                          (D30_TOTAL_REVENUE) * D90_D30
                      WHEN DATEDIFF(DAY, CAMPAIGN_INFO_COST_COUNT.INSTALL_DATE, CURRENT_DATE()) < 90 then
                          (D60_TOTAL_REVENUE) * D90_D60
                      ELSE (D90_TOTAL_REVENUE) END)::FLOAT AS                  PRED_D90_REVENUE,
       ZEROIFNULL(D90_D01)::FLOAT                                              D90_D01_MULTIPLIER,
       ZEROIFNULL(D90_D03)::FLOAT                                              D90_D03_MULTIPLIER,
       ZEROIFNULL(D90_D07)::FLOAT                                              D90_D07_MULTIPLIER,
       ZEROIFNULL(D90_D14)::FLOAT                                              D90_D14_MULTIPLIER,
       ZEROIFNULL(D90_D30)::FLOAT                                              D90_D30_MULTIPLIER,
       ZEROIFNULL(D90_D60)::FLOAT                                              D90_D60_MULTIPLIER,
       ZEROIFNULL(D90_TO_LIFETIME_FACTOR)::FLOAT                               D90_TO_LIFETIME_FACTOR,
       ZEROIFNULL(D90_TO_D360_FACTOR)::FLOAT                                   D90_TO_D360_FACTOR,
       ZEROIFNULL(TARGET.PERFORMANCE_TARGET)::FLOAT                            PERFORMANCE_TARGET,
       ZEROIFNULL(PURCHASES.UNIQUE_PURCHASERS)::NUMBER     AS                  TO_DATE_UNIQUE_PURCHASERS,
       CURRENT_TIMESTAMP::TIMESTAMP_NTZ                                        INSERT_TIME,
       CAMPAIGN_INFO_COST_COUNT.INSTALL_DATE::TIMESTAMP_NTZ                    _TST

FROM CAMPAIGN_INFO_COST_COUNT
         --Dx purchase cohorts
         LEFT OUTER JOIN L2_MARKETING_COHORT_MODEL.PURCHASE_COUNT_REVENUE PURCHASES
                         ON (CAMPAIGN_INFO_COST_COUNT.INSTALL_DATE = PURCHASES.INSTALL_DATE
                             AND CAMPAIGN_INFO_COST_COUNT.MEDIA_SOURCE = PURCHASES.MEDIA_SOURCE
                             AND CAMPAIGN_INFO_COST_COUNT.CAMPAIGN_ID = PURCHASES.CAMPAIGN_ID
                             AND CAMPAIGN_INFO_COST_COUNT.SUB_CAMPAIGN_ID = PURCHASES.SUB_CAMPAIGN_ID
                             AND CAMPAIGN_INFO_COST_COUNT.COUNTRY_CODE = PURCHASES.COUNTRY_CODE)

    --Dx ad cohorts
         LEFT OUTER JOIN L2_MARKETING_COHORT_MODEL.AD_WATCHED_COUNT_REVENUE AD_COUNT_REVENUE
                         ON (CAMPAIGN_INFO_COST_COUNT.INSTALL_DATE = AD_COUNT_REVENUE.INSTALL_DATE
                             AND CAMPAIGN_INFO_COST_COUNT.MEDIA_SOURCE = AD_COUNT_REVENUE.MEDIA_SOURCE
                             AND CAMPAIGN_INFO_COST_COUNT.COUNTRY_CODE = AD_COUNT_REVENUE.COUNTRY_CODE
                             AND CAMPAIGN_INFO_COST_COUNT.CAMPAIGN_ID = AD_COUNT_REVENUE.CAMPAIGN_ID
                             AND CAMPAIGN_INFO_COST_COUNT.SUB_CAMPAIGN_ID = AD_COUNT_REVENUE.SUB_CAMPAIGN_ID)

    --D90 predicted revenue
         LEFT OUTER JOIN L1_MARKETING.STATIC_LTV_PREDICTION_MULTIPLIERS PRED
                         ON (CAMPAIGN_INFO_COST_COUNT.GAME_NAME = PRED.APP_NAME
                             AND CAMPAIGN_INFO_COST_COUNT.PLATFORM = PRED.PLATFORM
                             AND CAMPAIGN_INFO_COST_COUNT.PRED_COUNTRY_TIER = PRED.COUNTRY_TIER
                             AND CAMPAIGN_INFO_COST_COUNT.SOURCE = PRED.SOURCE)

    --PERFORMANCE TARGET JOIN
         LEFT OUTER JOIN L1_MARKETING.STATIC_PERFORMANCE_TARGET TARGET
                         ON (CAMPAIGN_INFO_COST_COUNT.GAME_NAME = TARGET.GAME_NAME
                             AND CAMPAIGN_INFO_COST_COUNT.PLATFORM = TARGET.PLATFORM
                             AND CAMPAIGN_INFO_COST_COUNT.PERFORMANCE_TARGET_COUNTRY_TIER = TARGET.COUNTRY_TIER)

    --STATIC COUNTRY TIER JOIN
         LEFT OUTER JOIN (SELECT DISTINCT COUNTRY_TIER FROM L1_MARKETING.STATIC_COUNTRY_TIER) STATIC_COUNTRY_TIER_TBL
                         ON CAMPAIGN_INFO_COST_COUNT.COUNTRY_CODE = STATIC_COUNTRY_TIER_TBL.COUNTRY_TIER

WHERE CAMPAIGN_NAME NOT LIKE '%IMT-RT%'
  AND CAMPAIGN_INFO_COST_COUNT.INSTALL_DATE < CURRENT_DATE()
